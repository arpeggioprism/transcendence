import { OnModuleInit } from '@nestjs/common';
import { Server, Socket } from 'socket.io';
import { AuthService } from "src/auth/auth.service";
import { UserService } from "src/user/user.service";
import { OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';
import { GameService } from "./game.service";
export declare class GameGateway implements OnModuleInit, OnGatewayConnection, OnGatewayDisconnect {
    private authService;
    private userService;
    private gameService;
    private readonly MAP_X;
    private readonly MAP_Y;
    private readonly SPEED;
    private readonly paddleSpeed;
    private readonly PADDLE_SIZE;
    private readonly paddleGap;
    private readonly DELAY;
    private readonly MAXPOINT;
    constructor(authService: AuthService, userService: UserService, gameService: GameService);
    userSocketMap: Map<number, Socket<import("socket.io/dist/typed-events").DefaultEventsMap, import("socket.io/dist/typed-events").DefaultEventsMap, import("socket.io/dist/typed-events").DefaultEventsMap, any>>;
    gameRoomMap: Map<number, string>;
    gameNormalQueue: number[];
    gameAdvancedQueue: number[];
    userKeyMap: Map<number, string>;
    server: Server;
    onModuleInit(): void;
    joinQueue(client: any, gameMode: string): Promise<void>;
    runGame(gameMode: string, roomName: string, player1: Socket, player2: Socket, point1: number, point2: number): Promise<void>;
    inviteGame(hostSocket: Socket, invitation: any): Promise<void>;
    launchGame(playerRightSocket: Socket, invitation: any): Promise<void>;
    exitQueue(client: any): Promise<void>;
    exitGame(client: any): Promise<void>;
    updateKeyStatusW(client: any, newStatus: string): Promise<void>;
    updateKeyStatusS(client: any, newStatus: string): Promise<void>;
    handleConnection(client: Socket): Promise<void>;
    handleDisconnect(client: Socket): Promise<void>;
    private socketToUser;
    getKeyByValue(map: any, value: any): string;
}
