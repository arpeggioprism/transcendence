'use client'

import { useContext, useEffect, useState, useCallback, ReactNode, createContext } from 'react';

const stateUrl = `${process.env.NEXT_PUBLIC_APP_SERVER_URL}/auth/state`;

type AuthStateType = {
  loggedIn: boolean,
  user: any, // TODO type
  updated: boolean,
	twoFactor: boolean,
};

type AuthContextType = {
	authState: AuthStateType,
  updateLoginState: Function,
};

const AuthContext = createContext<AuthContextType | null>(null);

export function useAuthContext() {
  const currentAuthContext = useContext(AuthContext);
  if (currentAuthContext == null) {
    throw new Error("AuthContext is null. it must be used within <AuthContext.Provider>");
  }
  return currentAuthContext;
}

export default function AuthContextProvider({ children }: { children: ReactNode }) {
  const [authState, setAuthState] = useState<AuthStateType>({
		loggedIn: false,
		user: null,
		updated: false,
		twoFactor: false,
	});

  const updateLoginState = useCallback(async () => {
    await fetch(stateUrl, {
      method: 'GET',
      credentials: 'include',
    })
    .then(res => {
			if (res.ok) return res.json()
			else throw new Error("invalid response");
		})
    .then(data => {
      console.log(`updateLoginState: ${data}`);
			if (data.loggedIn === false) {
				setAuthState({
				...authState,
				loggedIn: false,
				})
				return;
			}
			setAuthState({
				loggedIn: data.loggedIn,
				user: data.user,
				updated: true,
				twoFactor: data.user,
			});
    })
    .catch(reason => {
      console.log(`${stateUrl}: fecth failed: ${reason}`);
    });
  }, []);

  useEffect(() => {
    updateLoginState();
  }, [updateLoginState]);
  // does monitoring required?

  return (
    <AuthContext.Provider value={{ authState, updateLoginState }}>
      {children}
    </AuthContext.Provider>
  );
}

